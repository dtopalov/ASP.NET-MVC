<h3>Advantages of .NET Web Forms</h3>
<ul>
    <li>
        <h4>RAD – Rapid Application Development</h4>
        <ul>
            <li>The mechanisms behind how controls and pages work within an event-driven structure are abstracted out so that the developer generally does not need to know the inner workings of the process</li>
            <li>Drag &amp; Drop controls provide most of the functionality right out of the box. 3rd party solutions are readily available, and control like Grids generate the HTML and JavaScript for the developer</li>
            <li>Applications, complete with validation, can be quickly developed by simply setting properties on controls</li>
            <li>Easy for newbies to "pick up and run" with web application development</li>
        </ul>
    </li>
    <li>
        <h4>Cost</h4>
    </li>
    <ul>
        <li>Being the older, more legacy framework, most .NET web developers have experience with Web Forms, or more specifically the desktop application event driven framework from which it was derived - there is a smaller learning curve implicit in learning the Web Forms framework</li>
    </ul>
    <li>
        <h4>More Mature</h4>
        <ul>
            <li>Like the old joke goes, "no matter how old you are I'll always be younger". Even though MVC is a younger .NET technology (the paradigm methodology, though, has been around for a while), Web Forms was here first and has a larger and more robust legacy implementation</li>
        </ul>
    </li>
</ul>
<h3>Disadvantages of .NET Web Forms</h3>
<ul><li><h4>Very little control over HTML produced on the page</h4></li><ul><li>The ability to simply drag &amp; drop controls enables rapid application development (RAD), but the drawback is that the developer has very little control over what HTML is actually produced on the page</li><li>Initially, a pretty big issue with Web Forms was not being able to control the HTML produced on the page, meaning that control ID generation was sometimes after-the fact guess work</li><ul><li>ID management becomes compromised and using client side frameworks like jQuery become more difficult in that control ID's, or even control nesting / hierarchies, are not always consistent</li><li>Even though Microsoft has taken steps to improve this in the latest release of MVC, not enough time has passed to determine if they've truly resolved this issue</li></ul></ul><li><h4>Web Forms Life Cycle</h4></li><ul><li>How many developers truly know the full extent of the Web Forms lifecycle? A lot of developers must become acquainted with the more esoteric lifecycle events as a result of needing to "hook" into 3rd party controls</li></ul></ul>
<h2>What is MVC?</h2><p>The MVC design pattern was not invented by Microsoft. Rather, it has been around for upwards of 30 years, having been first introduced around 1979. Since then, the methodology has been implemented by such well known platforms as <a href="http://rubyonrails.org/">Ruby on Rails</a>, <a href="https://developer.apple.com/">Apple's</a> <a href="https://developer.apple.com/technologies/mac/cocoa.html">Cocoa</a> and <a href="http://struts.apache.org/">Apache Struts</a>. Only relatively recently has Microsoft added the MVC design, building atop the .NET framework. As a result, .NET developers have the option to develop applications within the existing .NET world they already know but can eschew the lack of overall control offered by the drag &amp; drop of Web Forms. With MVC they can embrace the same separation of concern (SOC) paradigm that has already proven to be successful in other frameworks. Admittedly, not all MVC implementations are exactly the same, with slight differences existing between the different frameworks. For example, Microsoft's implementation of MVC more closely resembles Rails and <a href="https://www.djangoproject.com/">Django</a> rather than either Apple's <a href="https://developer.apple.com/technologies/mac/cocoa.html">Cocoa</a> or even the original implementation of MVC, <a href="http://en.wikipedia.org/wiki/Smalltalk">Smalltalk-80</a>.</p>
<h3>Advantages of MVC</h3>
<ul><li><h4>Multiple Forms</h4></li><ul><li>Web forms do not allow for multiple forms on a page, whereas MVC allows for any number of forms on the page</li></ul><li><h4>Similar to other established, non-Microsoft Frameworks</h4><ul><li>Developers with backgrounds in PHP, Ruby, or Python, will find architectural and event methodologies similarities to those implemented in MVC</li></ul></li><li><h4>Adheres to the "stateless" nature of the web</h4><ul><li>One big advantage is that Session[] usage is minimized so that the URL's now become the drivers behind data maintenance. For example, because an MVC application will pass data parameters via the URL or the View binding, the potential "crutch" of using and maintaining Session[] variables is virtually eliminated.</li></ul></li><li><h4>Test Driven Development (TDD)</h4><ul><li>TDD is facilitated much more easily</li></ul></li><li><h4>Separation of Concern (SOC)</h4></li><ul><li>SOC is encouraged and easier to implement</li></ul></ul>
<h2>Disadvantages of MVC</h2>
<ul><li><h4>HTML &amp; CSS skills must be resurrected</h4><ul><li>Oddly, one disadvantage is that the developer needs to be fairly competent in HTML and CSS, including dynamically modifying the DOM, styles and client-side events<ul><li>The Views are HTML structures that are written from scratch by the developer</li><li>Web Forms and their drag &amp; drop controls abstract out this process to the point of automatically creating nearly <em>all </em>the necessary HTML needed to display what is needed, including the accompanying client-side functionality</li><li>MVC requires the developer to understand how the client-side code and HTML all play together, thereby ensuring consistent, controlled code</li></ul></li></ul></li><li><h4>MVC is still "relatively" new</h4></li><ul><li>There is the potential added cost of either having in-house developers learn the new MVC framework or needing to pay for outside vendors to provide the work</li></ul></ul><p>No one solution is an absolute better choice than the other. The application framework should be chosen based upon the needs and resources of the company doing the development. If you have a development cycle that requires faster than expected turnaround, then Web Forms might be the best option for your company. If your development project has the time, money, and energy to develop an application from the ground up then MVC could potentially be the better option. Again, neither framework is the definite best option, but one could potentially be a better for your development team structure and resources. Segue has extensive experience with both frameworks and would be more than happy to help consult on your development decisions.</p>
