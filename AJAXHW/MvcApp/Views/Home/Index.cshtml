@using System.Collections
@using MvcApp.Models
@model IQueryable<MovieViewModel>

@{
    ViewBag.Title = "Movies Grid";
}

<h3 class="text-center">Click on a cell to edit it. Batch editing supported (multiple changes saved at once at the end).</h3>

@(Html.Kendo().Grid<MovieViewModel>
    ()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(m => m.Title).Width(200);
        columns.Bound(m => m.MaleActor).ClientTemplate("#=MaleActor.Name#").Width(170);
        columns.Bound(m => m.FemaleActor).ClientTemplate("#=FemaleActor.Name#").Width(170);
        columns.Bound(m => m.Year).Width(100);
        columns.Bound(m => m.Director).ClientTemplate("#=Director.Name#").Width(170);
        columns.Bound(m => m.Studio).ClientTemplate("#=Studio.Name#").Width(150);
        columns.Command(command => { command.Destroy(); }).Width(150);
    })
    .ToolBar(toolbar =>
    {
        toolbar.Create();
        toolbar.Save();
    })
    .Editable(editable => editable.Mode(GridEditMode.InCell))
    .Pageable()
    .Sortable()
    .Scrollable()
    .HtmlAttributes(new { style = "height:550px;" })
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .ServerOperation(false)
        .PageSize(10)
        .Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            model.Id(m => m.Id);
            model.Field(m => m.Id).Editable(false);
            model.Field(m => m.MaleActor).DefaultValue(
            ViewData["defaultMaleActor"] as MaleActorViewModel);
            model.Field(m => m.FemaleActor).DefaultValue(
            ViewData["defaultFemaleActor"] as FemaleActorViewModel);
            model.Field(m => m.Studio).DefaultValue(
            ViewData["defaultStudio"] as StudioViewModel);
            model.Field(m => m.Director).DefaultValue(
            ViewData["defaultDirector"] as DirectorViewModel);
        })
        .Create(update => update.Action("MoviesCreate", "Home"))
        .Read(read => read.Action("MoviesRead", "Home"))
        .Update(update => update.Action("MoviesUpdate", "Home"))
        .Destroy(update => update.Action("MoviesDestroy", "Home"))
        )
    )

@section scripts{
    <script type="text/javascript">
        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
    </script>
}
